import { useState } from "react";

const initialRows = [
  { aufgabe: "", rolle: "", kategorie: "", skill: "", soll: 1 }
];

const examplePrompt = `Ein Verein plant den Aufbau von 9 Insektenhotels auf 3 Streuobstwiesen. Die Insektenhotels sollen in Zusammenarbeit mit einer Schulklasse gebaut werden. Ziel ist der Beitrag zur Biodiversität und neue Mitglieder durch Öffentlichkeitsarbeit.`;

const teamMembers = ["Anna", "Ben", "Chris"];

export default function SkillMatrixSetup() {
  const [rows, setRows] = useState(initialRows);
  const [projectText, setProjectText] = useState(examplePrompt);
  const [autoGenerated, setAutoGenerated] = useState(false);
  const [skills, setSkills] = useState({});

  const handleChange = (index, field, value) => {
    const updated = [...rows];
    updated[index][field] = field === "soll" ? parseInt(value) || 1 : value;
    setRows(updated);
  };

  const handleSkillChange = (skillKey, member, value) => {
    setSkills({
      ...skills,
      [skillKey]: {
        ...skills[skillKey],
        [member]: parseInt(value) || 0
      }
    });
  };

  const addRow = () => {
    setRows([...rows, { aufgabe: "", rolle: "", kategorie: "", skill: "", soll: 1 }]);
  };

  const autoGenerateFromText = () => {
    const aiRows = [
      {
        aufgabe: "Insektenhotels konstruieren",
        rolle: "Bauleitung",
        kategorie: "Handwerk",
        skill: "Holzbearbeitung",
        soll: 3
      },
      {
        aufgabe: "Projekt dokumentieren",
        rolle: "Dokumentation",
        kategorie: "Kommunikation",
        skill: "Fotografie",
        soll: 2
      },
      {
        aufgabe: "Öffentlichkeitsarbeit planen",
        rolle: "PR",
        kategorie: "Marketing",
        skill: "Social Media",
        soll: 4
      }
    ];
    setRows(aiRows);
    setAutoGenerated(true);
  };

  const getGapMarker = (soll, ist) => {
    if (ist === 0) return "!!!";
    if (soll - ist >= 2) return "!";
    return "";
  };

  const getColor = (soll, ist) => {
    if (ist === soll) return "bg-green-200";
    if (soll - ist === 1) return "bg-yellow-200";
    if (soll - ist >= 2) return "bg-red-200";
    return "";
  };

  return (
    <div className="p-4 space-y-6">
      <h1 className="text-xl font-bold">SkillMatrix NG</h1>

      <div className="space-y-2">
        <label className="block text-sm font-medium">Projektbeschreibung eingeben:</label>
        <textarea
          rows={4}
          value={projectText}
          onChange={(e) => setProjectText(e.target.value)}
          className="w-full p-2 border rounded"
        />
        <button
          onClick={autoGenerateFromText}
          className="px-4 py-2 bg-green-600 text-white rounded"
        >
          Projektstruktur mit KI erzeugen
        </button>
      </div>

      <div className="space-y-2">
        {rows.map((row, index) => (
          <div key={index} className="grid grid-cols-5 gap-2 items-center">
            <input type="text" placeholder="Aufgabe" value={row.aufgabe} onChange={(e) => handleChange(index, "aufgabe", e.target.value)} className="p-2 border rounded" />
            <input type="text" placeholder="Rolle" value={row.rolle} onChange={(e) => handleChange(index, "rolle", e.target.value)} className="p-2 border rounded" />
            <input type="text" placeholder="Kategorie" value={row.kategorie} onChange={(e) => handleChange(index, "kategorie", e.target.value)} className="p-2 border rounded" />
            <input type="text" placeholder="Skill" value={row.skill} onChange={(e) => handleChange(index, "skill", e.target.value)} className="p-2 border rounded" />
            <input type="number" min={1} max={4} value={row.soll} onChange={(e) => handleChange(index, "soll", e.target.value)} className="p-2 border rounded w-16" />
          </div>
        ))}
      </div>

      <h2 className="text-lg font-semibold pt-6">Team-Profile & Skill-Levels</h2>
      <div className="overflow-auto">
        <table className="min-w-full border text-sm">
          <thead>
            <tr>
              <th className="border px-2 py-1">Skill</th>
              <th className="border px-2 py-1">Soll</th>
              {teamMembers.map(name => (
                <th key={name} className="border px-2 py-1">{name}</th>
              ))}
              <th className="border px-2 py-1">Lücke</th>
              <th className="border px-2 py-1">Defizit</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((row, i) => (
              <tr key={i}>
                <td className="border px-2 py-1">{row.skill}</td>
                <td className="border px-2 py-1 text-center">{row.soll}</td>
                {teamMembers.map(member => {
                  const ist = skills[row.skill]?.[member] || 0;
                  return (
                    <td key={member} className={`border px-2 py-1 text-center ${getColor(row.soll, ist)}`}>
                      <input
                        type="number"
                        min={0}
                        max={4}
                        value={ist}
                        onChange={(e) => handleSkillChange(row.skill, member, e.target.value)}
                        className="w-12 text-center bg-transparent"
                      />
                    </td>
                  );
                })}
                <td className="border px-2 py-1 text-center">
                  {teamMembers.some(name => (skills[row.skill]?.[name] || 0) === 0) ? "!!!" : ""}
                </td>
                <td className="border px-2 py-1 text-center">
                  {teamMembers.some(name => row.soll - (skills[row.skill]?.[name] || 0) >= 2) ? "!" : ""}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
